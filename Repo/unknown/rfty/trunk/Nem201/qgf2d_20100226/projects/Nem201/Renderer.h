#ifndef _RENDERER_H_
#define _RENDERER_H_

#include "SFML/Graphics.hpp"


class Renderer
{
public:
	/////////////////////////////////////////////////////////////////////////////////
	//D'tor
	/////////////////////////////////////////////////////////////////////////////////
	~Renderer();

	///////////////////////////////////////////////////////////////////////////////////
	//Returns the singleton instance
	///////////////////////////////////////////////////////////////////////////////////
	static Renderer& GetInstance();

	///////////////////////////////////////////////////////////////////////////////////
	//Initialises a render window for the game to use
	// the demensions are set to 800x600 for this render
	//Also wont init anything if an instance has already been created
	// to prevent someone calling this and over writing data that may have been changed
	//Returns the renderer
	///////////////////////////////////////////////////////////////////////////////////
	static void InitRenderer();

	///////////////////////////////////////////////////////////////////////////////////
	//CLoses the render window after deleting all nessary member data
	///////////////////////////////////////////////////////////////////////////////////
	static void ShutDown();

	/////////////////////////////////////////////////////////////////////////////////
	//Returns the render window
	////////////////////////////////////////////////////////////////////////////////
	sf::RenderWindow& GetWindow(){return *m_pWindow;};

	/////////////////////////////////////////////////////////////////////////////////
	//Adds the drawable to a vector of drawable for the renderer to draw
	// on one frame
	//They are rendered the order in which they are sent to the renderer
	////////////////////////////////////////////////////////////////////////////////
	bool AddDrawable(sf::Drawable& temp);

	////////////////////////////////////////////////////////////////////////////////
	//Renders all sprites that have been sent to the renderer to draw
	// this frame
	////////////////////////////////////////////////////////////////////////////////
	void RenderAll();

private:
	/////////////////////////////////////////////////////////////////////////////////
	//Singleton c'tor
	/////////////////////////////////////////////////////////////////////////////////
	Renderer();

	//
	//singleton instance
	//
	static Renderer* m_pInstance;

	//
	//The render window
	//
	sf::RenderWindow* m_pWindow;

	//
	//Drawable vector
	//
	std::vector<sf::Drawable*> m_pToDraw;	
	
};

#endif
