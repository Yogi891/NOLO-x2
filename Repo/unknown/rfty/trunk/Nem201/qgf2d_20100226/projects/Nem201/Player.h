#ifndef _PLAYER_H_
#define _PLAYER_H_

#include "SFML/Graphics.hpp"

class BasicBullet;
class Timeattack;

/////////////////////////////////////////////////////////////////////////////////////////
//Enum storing the different types of ships that can be choosen
/////////////////////////////////////////////////////////////////////////////////////////
enum ShipType
{
	Attack,
	Defence,
	AllRound
};

struct Coll
{
	sf::Vector2f Center;
	float Radius;	
};
class Player
{
public:


	/////////////////////////////////////////////////////////////////////////////////////////
	//C'tor requires what ship to load
	/////////////////////////////////////////////////////////////////////////////////////////
	Player(ShipType Ship);

	/////////////////////////////////////////////////////////////////////////////////////////
	//D'tor cleans up memory
	/////////////////////////////////////////////////////////////////////////////////////////
	~Player();

	/////////////////////////////////////////////////////////////////////////////////////////
	//Main ship loop
	//Needs to run every frame, takes dt to make movement and shooting smooth
	/////////////////////////////////////////////////////////////////////////////////////////
	void UpdateShip(float dt,Timeattack& state);

	/////////////////////////////////////////////////////////////////////////////////////////
	//Returns the ships sprite
	/////////////////////////////////////////////////////////////////////////////////////////
	sf::Sprite& GetDrawable(){return *m_pShipSprite;}

	/////////////////////////////////////////////////////////////////////////////////////////
	//Returns a bullets lifetime
	/////////////////////////////////////////////////////////////////////////////////////////
	float GetBulletLifeTime(){return m_BulletLT;}

	/////////////////////////////////////////////////////////////////////////////////////////
	//Returns the timer for missiles to be used
	////////////////////////////////////////////////////////////////////////////////////////
	float GetMissileTimer(){return m_MissileCounter;}

	////////////////////////////////////////////////////////////////////////////////////////
	//Returns the how many lives the player has left
	////////////////////////////////////////////////////////////////////////////////////////
	int GetLives(){return m_NumLives;}

	////////////////////////////////////////////////////////////////////////////////////////
	//Lowers the number of lives the player has left by one
	////////////////////////////////////////////////////////////////////////////////////////
	void LowerLives(){m_NumLives--;}

	sf::Vector2f& GetPos() { return m_ShipPos; }

	Coll& GetCirc(){return m_Circ;}

protected:

	/////////////////////////////////////////////////////////////////////////////////////////
	//Loads the ship that has been choosen
	//Sets all deafualt stats for this ship from filename passed in
	/////////////////////////////////////////////////////////////////////////////////////////
	void LoadShip(ShipType Ship);

private:
	//
	//Ship image and sprite and location
	//
	sf::Image* m_pShipImage;
	sf::Sprite* m_pShipSprite;
	sf::Vector2f m_ShipPos;

	//
	//Ship data loaded from file
	//
	sf::Vector2f m_ShipVel;
	float m_FireRate;
	float m_BulletLT; //life time
	float m_Angle;
	float m_MissileRate;
	float m_BombRate;

	//
	//Used for bullet fire rate
	//
	float m_DTCounter;
	float m_MissileCounter;
	float m_BombCounter;

	//
	//Stores the number of lives the player has
	//
	int m_NumLives;

	Coll m_Circ;
};

#endif
