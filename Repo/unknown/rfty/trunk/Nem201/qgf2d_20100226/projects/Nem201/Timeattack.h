#ifndef _TIMEATTACK_H_
#define _TIMEATTACK_H_

#include "State.h"
#include "Player.h"
#include "XMLParser.h"
#include "BMLScript.h"
#include "Test_Bullet.h"
#include "CBullet.h"

class BackGround;
class BasicBullet;
class Upgrade;
class Enemy;
class GUI;
class BMLScript;
class BEnemy;


class Timeattack : public State
{
public:
	/////////////////////////////////////////////////////////////////////////////////////////
	//State inheriated functions
	/////////////////////////////////////////////////////////////////////////////////////////
	Timeattack(ShipType Ship);
	Timeattack();
	virtual ~Timeattack();
	virtual void Run(float dt);
	virtual StateType& GetType(){return m_stateType;}

	/////////////////////////////////////////////////////////////////////////////////////////
	//Creates a bullet for the player
	// takes the angle of seperation of the bullets
	/////////////////////////////////////////////////////////////////////////////////////////
	void CreatePBullet(float a_Angle);

	/////////////////////////////////////////////////////////////////////////////////////////
	//Creates a missile for the player
	/////////////////////////////////////////////////////////////////////////////////////////
	void CreateMissile();

	/////////////////////////////////////////////////////////////////////////////////////////
	//Creates a bomb for the player
	/////////////////////////////////////////////////////////////////////////////////////////
	void CreateBomb();

	/////////////////////////////////////////////////////////////////////////////////////////
	//Testing bulletml for the player
	/////////////////////////////////////////////////////////////////////////////////////////
	void CreateTBullet();
	
	/////////////////////////////////////////////////////////////////////////////////////////
	//Creates a enemy bullet
	/////////////////////////////////////////////////////////////////////////////////////////
	void CreateEBullet();

	/////////////////////////////////////////////////////////////////////////////////////////
	//Returns a refrence to the player
	/////////////////////////////////////////////////////////////////////////////////////////
	Player& GetPlayer(){return *m_pPlayer;}

	/////////////////////////////////////////////////////////////////////////////////////////
	//Increase the player score by the amount passed in, then multiplied by the muliplier
	/////////////////////////////////////////////////////////////////////////////////////////
	void AddScore(int a_Increase);

	/////////////////////////////////////////////////////////////////////////////////////////
	//Increase the mulitplier
	/////////////////////////////////////////////////////////////////////////////////////////
	void IncreaseMulti();


protected:
	/////////////////////////////////////////////////////////////////////////////////////////
	//Updates all bullets
	/////////////////////////////////////////////////////////////////////////////////////////
	void UpdateBullets(float dt);

	/////////////////////////////////////////////////////////////////////////////////////////
	//Updates all the upgrade objects
	/////////////////////////////////////////////////////////////////////////////////////////
	void UpdateUpgrades(float dt);

	/////////////////////////////////////////////////////////////////////////////////////////
	//Updates all bullets in BulletML
	/////////////////////////////////////////////////////////////////////////////////////////
	void UpdateBulletML(float dt);

	/////////////////////////////////////////////////////////////////////////////////////////
	//Updates all the enemy ships
	/////////////////////////////////////////////////////////////////////////////////////////
	void UpdateEnemy(float dt);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Hack in a level for now
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void HackLevel();
private:

	//
	//Player
	//
	Player* m_pPlayer;
	int m_WeaponLvl;

	//
	//Holds the GUI
	//
	GUI* m_pGUI;

	//
	//Holds all bullets within the game world
	//
	std::vector<BasicBullet*> m_pBullets;
	float m_BBulletSpeed;

	//
	//HOlds the enemies
	//
	std::vector<Enemy*> m_pEnemies;
	float m_WaveTimer;

	//
	//Vector for BulletML objects
	//
	//	std::vector<

	//
	//Holds Upgrade sprites
	//
	std::vector<Upgrade*> m_pUpgrades;

	//
	//Background
	//
	BackGround* m_pBackGround;

	//
	//Timer
	//
	float m_Timer;

	//
	//Missile timer
	//
	sf::String* m_pMissTimer;

	std::vector<BMLScript*> pBMLS;
	//
	//Holds the players score for this round
	//
	int m_Score;
	float m_Multiplier;

	std::vector<Test_Bullet*> pBulletPool;
	std::vector<BEnemy*> m_benemies;
	int m_enemyCount;
	bool kgo;

};

#endif
