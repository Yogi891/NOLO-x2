#include "XMLTag.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// XML tag Base Class
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
XMLTag::XMLTag(tagType a_BMLtype)
: m_BMLtype(a_BMLtype)
, m_isCloseTag(false)
{
}

XMLTag::~XMLTag()
{
}

const tagType XMLTag::GetTagType()
{
	return m_BMLtype;
}

void XMLTag::SetCloseTag()
{
	m_isCloseTag = true;
}
const bool XMLTag::CheckCloseTag()
{
	return m_isCloseTag;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Fire Tag
// Notes: If a label is not set, it will simply be empty. Default would be "<fire>"
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
TagFire::TagFire()
: XMLTag(FIRE)
, m_label(NULL)
{

}
TagFire::~TagFire()
{

}

void TagFire::SetLabel(std::string* a_label)
{
	m_label = new std::string(*a_label);
}

std::string* TagFire::GetLabel() const
{
	if(m_label == NULL) return 0;
	else return m_label;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Action Tag
// Notes: If a label is not set, it will simply be empty. Default would be "<action>"
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
TagAction::TagAction()
: XMLTag(ACTION)
, m_label(NULL)
{

}
TagAction::~TagAction()
{

}

void TagAction::SetLabel(std::string* a_label)
{
	m_label = new std::string(*a_label);
}

std::string* TagAction::GetLabel() const
{
	if(m_label == NULL) return 0;
	else return m_label;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Bullet Tag
// Notes: If a label is not set, it will simply be empty. Default would be "<bullet>"
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
TagBullet::TagBullet()
: XMLTag(BULLET)
, m_label(NULL)
{

}
TagBullet::~TagBullet()
{

}

void TagBullet::SetLabel(std::string* a_label)
{
	m_label = new std::string(*a_label);
}

std::string* TagBullet::GetLabel() const
{
	if(m_label == NULL) return 0;
	else return m_label;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BulletRef Tag
// Notes: If a label is not set, it will simply be empty. Default would be "<bulletRef>"
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
TagBulletRef::TagBulletRef()
: XMLTag(BULLETREF)
, m_label(NULL)
{

}
TagBulletRef::~TagBulletRef()
{

}

void TagBulletRef::SetLabel(std::string* a_label)
{
	m_label = new std::string(*a_label);
}

std::string* TagBulletRef::GetLabel() const
{
	if(m_label == NULL) return 0;
	else return m_label;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BulletML Tag
// Notes: If a label is not set, it will simply be empty. Default would be "<bulletRef>"
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
TagBulletML::TagBulletML()
: XMLTag(BULLETML)
, m_shmupType(NULL)
{

}
TagBulletML::~TagBulletML()
{

}

void TagBulletML::SetShmupType(std::string* a_shmupType)
{
	m_shmupType = new std::string(*a_shmupType);
}

std::string* TagBulletML::GetShmupType() const
{
	if(m_shmupType == NULL) return 0;
	else return m_shmupType;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Direction tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

TagDirection::TagDirection()
: XMLTag(DIRECTION)
, m_content(NULL)
, m_type(NULL)
{

}

TagDirection::~TagDirection()
{

}


void TagDirection::SetType(std::string* a_type)
{
	m_type = new std::string(*a_type);
}

void TagDirection::SetContent(std::string* a_content)
{
	m_content = new std::string(*a_content);
}

std::string* TagDirection::GetType() const
{
	if(m_type == NULL) return 0;
	else return m_type;
}
std::string* TagDirection::GetContent() const
{
	if(m_content == NULL) return 0;
	else return m_content;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Speed tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

TagSpeed::TagSpeed()
: XMLTag(SPEED)
, m_content(NULL)
{

}

TagSpeed::~TagSpeed()
{

}

void TagSpeed::SetContent(std::string* a_content)
{
	m_content = new std::string(*a_content);
}
void TagSpeed::SetType(std::string* a_type)
{
	m_type = new std::string(*a_type);
}
std::string* TagSpeed::GetType() const
{
	if(m_type == NULL) return 0;
	else return m_type;
}
std::string* TagSpeed::GetContent() const
{
	if(m_content == NULL) return 0;
	else return m_content;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Wait tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

TagWait::TagWait()
: XMLTag(WAIT)
, m_content(NULL)
{

}

TagWait::~TagWait()
{

}

void TagWait::SetContent(std::string* a_content)
{
	m_content = new std::string(*a_content);
}

std::string* TagWait::GetContent() const
{
	if(m_content == NULL) return 0;
	else return m_content;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Vanish tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

TagVanish::TagVanish()
: XMLTag(VANISH)
{

}

TagVanish::~TagVanish()
{

}



///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Repeat tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

TagRepeat::TagRepeat()
: XMLTag(REPEAT)
{

}

TagRepeat::~TagRepeat()
{

}



///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Times tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

TagTimes::TagTimes()
: XMLTag(TIMES)
, m_content(NULL)
{

}

TagTimes::~TagTimes()
{

}

void TagTimes::SetContent(std::string* a_content)
{
	m_content = new std::string(*a_content);
}

std::string* TagTimes::GetContent() const
{
	if(m_content == NULL) return 0;
	else return m_content;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FireRef tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

TagFireRef::TagFireRef()
: XMLTag(FIREREF)
, m_label(NULL)
{

}

TagFireRef::~TagFireRef()
{

}


void TagFireRef::SetLabel(std::string* a_label)
{
	m_label = new std::string(*a_label);
}

std::string* TagFireRef::GetLabel() const
{
	if(m_label == NULL) return 0;
	else return m_label;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Param tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

TagParam::TagParam()
: XMLTag(PARAM)
, m_content(NULL)
{

}

TagParam::~TagParam()
{

}

void TagParam::SetContent(std::string* a_content)
{
	m_content = new std::string(*a_content);
}

std::string* TagParam::GetContent() const
{
	if(m_content == NULL) return 0;
	else return m_content;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ActionRef tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

TagActionRef::TagActionRef()
: XMLTag(ACTIONREF)
, m_label(NULL)
{

}

TagActionRef::~TagActionRef()
{

}


void TagActionRef::SetLabel(std::string* a_label)
{
	m_label = new std::string(*a_label);
}

std::string* TagActionRef::GetLabel() const
{
	if(m_label == NULL) return 0;
	else return m_label;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Term tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

TagTerm::TagTerm()
: XMLTag(TERM)
, m_content(NULL)
{

}

TagTerm::~TagTerm()
{

}

void TagTerm::SetContent(std::string* a_content)
{
	m_content = new std::string(*a_content);
}
std::string* TagTerm::GetContent() const
{
	if(m_content == NULL) return 0;
	else return m_content;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ChangeSpeed tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

TagChangeSpeed::TagChangeSpeed()
: XMLTag(CHANGESPEED)
{

}

TagChangeSpeed::~TagChangeSpeed()
{

}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ChangeDirection tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

TagChangeDirection::TagChangeDirection()
: XMLTag(CHANGEDIRECTION)
{

}

TagChangeDirection::~TagChangeDirection()
{

}



///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Accel tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

TagAccel::TagAccel()
: XMLTag(ACCELR)
{

}

TagAccel::~TagAccel()
{

}



///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Horizontal tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

TagHori::TagHori()
: XMLTag(HORIZONTAL)
, m_content(NULL)
{

}

TagHori::~TagHori()
{

}

void TagHori::SetContent(std::string* a_content)
{
	m_content = new std::string(*a_content);
}

std::string* TagHori::GetContent() const
{
	if(m_content == NULL) return 0;
	else return m_content;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Vertical tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////


TagVert::TagVert()
: XMLTag(VERTICAL)
, m_content(NULL)
{

}

TagVert::~TagVert()
{

}

void TagVert::SetContent(std::string* a_content)
{
	m_content = new std::string(*a_content);
}

std::string* TagVert::GetContent() const
{
	if(m_content == NULL) return 0;
	else return m_content;
}