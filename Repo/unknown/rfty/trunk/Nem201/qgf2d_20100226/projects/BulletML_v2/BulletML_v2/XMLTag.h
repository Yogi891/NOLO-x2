#ifndef _XMLTAG_H_
#define _XMLTAG_H_

#include <string>

enum tagType { FIRE, ACTION, BULLET, FIREREF, ACTIONREF, BULLETREF,
			   TERM, CHANGESPEED, CHANGEDIRECTION, SPEED, DIRECTION,
			   VANISH, TIMES, REPEAT, ACCELR, HORIZONTAL, VERTICAL,
			   PARAM, WAIT, BULLETML };

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Tag base class
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class XMLTag
{
public:
	XMLTag(tagType a_BMLtype);
	virtual ~XMLTag();

	const tagType GetTagType();
	void SetCloseTag();
	const bool CheckCloseTag();

protected:

private:
	tagType m_BMLtype;
	bool m_isCloseTag;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Fire tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TagFire : public XMLTag
{
public:
	TagFire();
	virtual ~TagFire();

	void SetLabel(std::string* a_label);
	
	std::string* GetLabel() const;
private:
	std::string* m_label;

};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Action tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TagAction : public XMLTag
{
public:
	TagAction();
	virtual ~TagAction();

	void SetLabel(std::string* a_label);

	std::string* GetLabel() const;
private:
	std::string* m_label;


};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Bullet tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TagBullet : public XMLTag
{
public:
	TagBullet();
	virtual ~TagBullet();

	void SetLabel(std::string* a_label);

	std::string* GetLabel() const;

private:
	std::string* m_label;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BulletRef tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TagBulletRef : public XMLTag
{
public:
	TagBulletRef();
	virtual ~TagBulletRef();

	void SetLabel(std::string* a_label);

	std::string* GetLabel() const;

private:
	std::string* m_label;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BulletML tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TagBulletML : public XMLTag
{
public:
	TagBulletML();
	virtual ~TagBulletML();

	void SetShmupType(std::string* a_shmupType);

	std::string* GetShmupType() const;
private:
	std::string* m_shmupType;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Direction tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TagDirection : public XMLTag
{
public:
	TagDirection();
	virtual ~TagDirection();

	void SetType(std::string* a_type);
	void SetContent(std::string* a_content);

	std::string* GetType() const;
	std::string* GetContent() const;

private:
	std::string* m_type;
	std::string* m_content;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Speed tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TagSpeed : public XMLTag
{
public:
	TagSpeed();
	virtual ~TagSpeed();

	void SetContent(std::string* a_content);
	void SetType(std::string* a_type);
	std::string* GetType() const;
	std::string* GetContent() const;

private:
	std::string* m_type;
	std::string* m_content;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Wait tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TagWait : public XMLTag
{
public:
	TagWait();
	virtual ~TagWait();

	void SetContent(std::string* a_content);

	std::string* GetContent() const;

private:
	std::string* m_content;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Vanish tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TagVanish : public XMLTag
{
public:
	TagVanish();
	virtual ~TagVanish();

private:

};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Repeat tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TagRepeat : public XMLTag
{
public:
	TagRepeat();
	virtual ~TagRepeat();

private:

};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Times tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TagTimes : public XMLTag
{
public:
	TagTimes();
	virtual ~TagTimes();

	void SetContent(std::string* a_content);

	std::string* GetContent() const;
private:
	std::string* m_content;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FireRef tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TagFireRef : public XMLTag
{
public:
	TagFireRef();
	virtual ~TagFireRef();

	void SetLabel(std::string* a_label);

	std::string* GetLabel() const;

private:
	std::string* m_label;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Param tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TagParam : public XMLTag
{
public:
	TagParam();
	virtual ~TagParam();

	void SetContent(std::string* a_content);

	std::string* GetContent() const;
private:
	std::string* m_content;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ActionRef tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TagActionRef : public XMLTag
{
public:
	TagActionRef();
	virtual ~TagActionRef();

	void SetLabel(std::string* a_label);

	std::string* GetLabel() const;

private:
	std::string* m_label;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Term tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TagTerm : public XMLTag
{
public:
	TagTerm();
	virtual ~TagTerm();

	void SetContent(std::string* a_content);

	std::string* GetContent() const;
private:
	std::string* m_content;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ChangeSpeed tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TagChangeSpeed: public XMLTag
{
public:
	TagChangeSpeed();
	virtual ~TagChangeSpeed();

private:
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ChangeDirection tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TagChangeDirection: public XMLTag
{
public:
	TagChangeDirection();
	virtual ~TagChangeDirection();

private:
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Accel tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TagAccel: public XMLTag
{
public:
	TagAccel();
	virtual ~TagAccel();

private:
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Horizontal tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TagHori : public XMLTag
{
public:
	TagHori();
	virtual ~TagHori();

	void SetContent(std::string* a_content);

	std::string* GetContent() const;
private:
	std::string* m_content;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Vertical tag
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

class TagVert : public XMLTag
{
public:
	TagVert();
	virtual ~TagVert();

	void SetContent(std::string* a_content);

	std::string* GetContent() const;
private:
	std::string* m_content;
};




#endif